//css3 mixins
@mixin transition($transition-property: all, $transition-time: 1s, $method: ease) {
	-webkit-transition: $transition-property $transition-time $method;
	-moz-transition: $transition-property $transition-time $method;
	-ms-transition: $transition-property $transition-time $method;
	-o-transition: $transition-property $transition-time $method;
	transition: $transition-property $transition-time $method;
}

@mixin transform($prop){
	-webkit-transform: $prop;
	-moz-transform: $prop;
	-o-transform: $prop;
	-ms-transform: $prop;  
	transform: $prop;    
}

//hardware accelerated transitions
@mixin transformHW($prop: ""){
	-webkit-transform: #{$prop} translate3d(0,0,0);
	-moz-transform: #{$prop} translate3d(0,0,0);
	-o-transform: #{$prop};
	-ms-transform: #{$prop};  
	transform: #{$prop} translate3d(0,0,0);    
} 
 
@mixin skew($prop){
	@include transformHW(skew($prop));
}
	
@mixin scale($prop){
	@include transformHW(scale($prop));
}
@mixin rotate($prop){
	@include transformHW(rotate($prop));
}

//grid mixins
$one_col: (100% - ($gutter * ($cols - 1))) / $cols;
@mixin cols($num) {
  width: ($one_col * $num) + ($gutter * ($num - 1));
}
@mixin sub_cols($num_child, $num_parent) {
  $parent_size: ($one_col * $num_parent) + ($gutter * ($num_parent - 1));
  $child_size: ($one_col * $num_child) + ($gutter * ($num_child - 1));
  margin-left: ($gutter / $parent_size) * 100%;
  width: ($child_size / $parent_size) * 100%;
}

@import "compass/css3";

@mixin gradient($start, $end){
	background-color: $end;
	@include background-image(linear-gradient($start, $end));
	filter: progid:DXImageTransform.Microsoft.Gradient(startColorStr="#{$start}", endColorStr="#{$end}");
}